#/ PART1

import bags

const F = 1
const NACCEPTORS = 2 * F + 1
const NLEADERS = F + 1
const NBALLOTS = 2

network = bags.empty()

proposals = [ choose({0, 1}) for i in {0..NLEADERS-1} ]

def send(msg):
    atomically network = bags.add(network, msg)

def receive(ballot, phase) returns quorum:
    let msgs = { e:c for (b,p,t,e):c in network
                        where (b,p,t) == (ballot, phase, "B") }:
        quorum = bags.combinations(msgs, NACCEPTORS - F)

print proposals
for i in {0..NLEADERS - 1}:
    spawn leader(i + 1, proposals[i])
for i in {1..NACCEPTORS}:
    spawn eternal acceptor()

#/ PART2

def leader(self, proposal):
    var ballot, estimate, decided = self, proposal, False
    send(ballot, 1, "A", None)
    while ballot <= NBALLOTS:
        atomically when exists quorum in receive(ballot, 1):
            let accepted = { e for e:_ in quorum where e != None }:
                if accepted != {}:
                    _, estimate = max(accepted)
            send(ballot, 2, "A", estimate)
        atomically when exists quorum in receive(ballot, 2):
            if bags.multiplicity(quorum, (ballot, estimate)) == (NACCEPTORS - F):
                assert estimate in proposals    # validity
                if not decided:
                    print estimate
                    decided = True
            ballot += NLEADERS
            if ballot <= NBALLOTS:
                send(ballot, 1, "A", None)

def acceptor():
    var ballot, last_accepted, received = 0, None, {}
    while True:
        atomically when exists b,p,e in { (bb,pp,ee) for bb,pp,tt,ee:_ in network
                    where ((bb,pp) not in received) and (tt == "A") }:
            received |= { (b, p) }
            if b >= ballot:
                ballot = b
                if p == 2:
                    last_accepted = (ballot, e)
            send(b, p, "B", last_accepted)
