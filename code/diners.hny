def Diners(n) returns diners_state:
    diners_state = { .forks: [ False, ] * n, .n: n }

def enter(f, i):
    atomically when (not f->forks[i]) and (not f->forks[(i + 1) % f->n]):
        f->forks[i] = True
        f->forks[(i + 1) % f->n] = True

def exit(f, i):
    atomically:
        assert f->forks[i]
        assert f->forks[(i + 1) % f->n]
        f->forks[i] = f->forks[(i + 1) % f->n] = False
